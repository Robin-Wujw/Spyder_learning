协程 & asyncio & 异步 
    - 异步非阻塞、asyncio 
    - tornado、fastapi、django3.x asgi、aiohttp都在异步 -> 提升性能
    如何讲解：
        - 协程
        - asyncio模块进行异步编程
        - 实战案例

    1.协程
    协程不是计算机提供，程序员人为创建
    协程(Coroutine),也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码快相互切换执行。例如:
    ...
    def func1():
        print(1)
        ...
        print(2)
    def func2():
        print(3)
        ...
        print(4)
    func1()
    func2() 
    ...
    实现协程的方法:
        -greenlet,早期模块。
        -yield关键字
        -asyncio装饰器(py3.4)
        -async\await关键字(py3.5)
    
    协程的意义:在一个线程中，如果遇到IO等待时间，线程不会傻傻等，而是利用空闲时间干其他任务
    案例: 下载三张图片(网络io)
        -普通方式(同步方式)
        -协程方式(异步方式)
    
    异步编程:
        - 事件循环： 理解成一个死循环，去检测并执行某些代码
        ...
        # 伪代码
        任务列表 = [任务1，任务2，任务3，...]
        while True:
            可执行的任务列表,已完成的任务列表 = 去任务列表中检查所有的任务，将'可执行'和'已完成'的任务返回

            for 就绪任务 in 可执行的任务列表:
                执行已就绪的任务
            
            for 已完成的任务 in 已完成的任务列表:
                在任务列表中移除 已完成的任务

            如果 任务列表 中的任务都已完成 则终止循环
        ...
        ...
        import asyncio 

        #去生成或获取一个事件循环
        loop = asyncio.get_event_loop()
        #将任务放到任务列表
        loop.run_until_complete(任务)
        ...
        - 快速上手:
            -协程函数: 定义函数的时候是 async def 函数名
            -协程对象: 执行 协程函数()得到的协程对象。
        ...
        async def func():
            pass 
        result = func()
        ...
        注意: 执行协程函数创建协程对象，函数内部代码不会执行。
        如果想要运行协程函数内部代码，必须要将协程对象交给事件循环来处理
        ...
        import asyncio
        async def fun():
            print('快来搞我吧！')
        result = func()

        #loop = asyncio.get_event_loop()
        #loop.run_until_complete(result)
        asyncio.run(result)  #py3.7以后
        ...

        - await关键字

        await + 可等待的对象(协程对象、Future对象、Task对象 -> IO等待)
        示例1:
        ...
        import asyncio 

        async def fun():
            print('来玩啊')
            response  = await asyncio.sleep(2)
            print('结束',response)
        asyncio.run(fun())
        ...

        示例2:
        ...
        import asyncio 

        async def others():
            print('start')
            await asyncio.sleep(2)
            print("end")
            return '返回值'
        async def fun():
            print("执行协程函数内部代码")
            #遇到IO操作挂起当前协程(任务)，等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程(任务)
            response = await others()
            print('IO请求结束,结果为:',response)
        asyncio.run(fun())
        ...
        示例3:
        ...
        import asyncio 

        async def others():
            print('start')
            await asyncio.sleep(2)
            print("end")
            return '返回值'
        async def fun():
            print("执行协程函数内部代码")
            #遇到IO操作挂起当前协程(任务)，等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程(任务)
            response1 = await others()
            print('IO请求结束,结果为:',response1)
            response2 = await others()
            print('IO请求结束,结果为:',response2)
        asyncio.run(fun())
        ...
        await 就是等待对应的值得到结果之后再继续往下走

        - Task对象:
        在事件循环中添加多个任务。
        Tasks 用于并发调度协程，通过asyncio.create_task(协程对象)的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用asyncio.create_task()函数以外，还可以用低层级的loop.create_task()或ensure_future()函数。不建议手动实例化Task对象。
        
        示例1:
        ...
        import asyncio 

        async def func():
            print(1)
            await asyncio.sleep(2)
            print(2)
            return '返回值'

        async def main():
            print('main开始')
            
            #创建Task对象，将当前执行func函数任务添加到事件循环
            task1 = asyncio.create_task(func())

            #创建Task对象，将当前执行func函数任务添加到事件循环
            task2 = asyncio.create_task(func())

            print('main结束')
            #当执行某协程遇到IO操作时，会自动化切换执行其他任务
            #此处的await是等待相对应的协程全部执行完毕并获取结果
            ret1 = await task1
            ret2 = await task2 
            print(ret1,ret2)
        
        asyncio.run(main())
        ...
        示例2:
        ...
        import asyncio 

        async def func():
            print(1)
            await asyncio.sleep(2)
            print(2)
            return '返回值'

        async def main():
            print('main开始')
            
            #
            task_list = [
                asyncio.create_task(func(),name='n1'),
                asyncio.create_task(func(),name='n2')
            ]

            print('main结束')

            done,pending = await asyncio.wait(task_list,timeout=None)
            print(done)
        
        asyncio.run(main())
        ...
        示例3:
        ...
        import asyncio 

        async def func():
            print(1)
            await asyncio.sleep(2)
            print(2)
            return '返回值'

            
        task_list = [
            func(),
            func()
        ]


        done,pending = asyncio.run(asyncio.wait(task_list))
        print(done)
        ...
        -Future 对象:
        Task 继承 Future Task对象内部await结果的处理基于Future对象来的
        示例1:
        ...
        async def main():
            #获取当前事件循环
            loop = asyncio.get_running_loop()
            #创建一个任务(Future对象)，这个任务什么也不干
            fut = loop.create_future()
            #等待任务最终结果(Future对象)，没有结果会一直等下去
            await fut 
        asyncio.run(main())
        ...
        示例2:
        ...
        import asyncio 

        async def set_after(fut):
            await asyncio.sleep(2)
            fut.set_after('666')
        
        async def main():
            #获取当前事件循环
            loop = asyncio.get_running_loop()
            #创建一个任务(Future对象)，没绑定任何行为，则这个任务永远不知道什么时候结束
            fut = loop.create_future()

            #创建一个任务(Task任务)，绑定了set_after函数，函数内部在2s之后会给fut赋值
            #即手动设置future任务的最终结果，那么fut就可以结束了
            await loop.create_task(set_after(fut))
            #等待Future对象获取最终结果，否则一直等下去
            data = await fut 
            print(data)
        asyncio.run(main())